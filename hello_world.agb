; Import definitions file
INCLUDE "gbhw.inc"

; Program start
SECTION "start", ROM0[$0100]
  NOP
  JP start

  ; Header
  ROM_HEADER ROM_NOMBC, ROM_SIZE_32KBYTE, RAM_SIZE_0KBYTE

; start label
start:
  NOP
  DI
  LD SP, $FFFF

; initialization label
initialization:
  ; Set palette
  LD A, %11100100
  LD [rBGP], A

  ; Set scrolls (X and Y) to (0,0)
  LD A, 0
  LD [rSCX], A
  LD [rSCY], A

  CALL turn_off_LCD

  ; Load tile in the tile memory
  LD HL, tiles
  LD DE, _VRAM
  LD B, 32 ; bytes to be copied, 2 tiles

.loop_load_tile
  LD A, [HL]
  LD [DE], A
  DEC B
  JR Z, .end_loop_load_tile
  INC HL
  INC DE
  JR .loop_load_tile
.end_loop_load_tile

; Write tiles
LD HL, _SCRN0
LD DE, 32*32 ; amount of bytes in the background map

; Clean screen
.loop_clean_screen
  LD A, 0
  LD [HL], A
  DEC DE
  LD A, D
  OR E
  JP Z, .end_loop_clean_screen
  INC HL
  JP .loop_clean_screen
.end_loop_clean_screen

; Load tile
LD HL, _SCRN0
LD [HL], $01

; Config and activate display
LD A, LCDCF_ON|LCDCF_BG8000|LCDCF_BG9800|LCDCF_BGON|LCDCF_OBJ8|LCDCF_OBJOFF
LD [rLCDC], A

; Infinite loop
loop_game:
  HALT
  NOP
  JR loop_game

; LCD's turn off rutine
turn_off_LCD:
  LD A, [rLCDC]
  RLCA
  RET NC ; do nothing if the screen is already turned off

; Wait for V-Blank
.wait_VBlank
  LD A, [rLY]
  CP 145
  JR NZ, .wait_VBlank

  ; Here we're in V-Blank, turn of the display
  LD A, [rLCDC]
  RES 7, A
  LD [rLCDC], A

  RET

; Tile data
tiles:
  ; Blank tile
  DB $00, $00, $00, $00, $00, $00, $00, $00
  DB $00, $00, $00, $00, $00, $00, $00, $00
  ; Our tile to display
  DB $30, $30, $30, $20, $05, $7C, $80, $B0
  DB $30, $30, $00, $30, $40, $50, $10, $10
end_tiles:
